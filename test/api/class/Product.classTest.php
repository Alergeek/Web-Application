<?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-04-02 at 11:53:17.
 */
class ProductTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Product
     */
    protected $product;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->product = new Product(1234567890123, 'Testproduct');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        $del_query = 'DELETE FROM product
                WHERE ean <> 1234567890123 AND ean <> 1234567890125';
        DB::con()->query($del_query);
    }

    /**
     * @covers Product::create
     */
    public function testCreate() {
        $testprod = new Product(1234567890124, 'TestCreateProd');
        $new_product = Product::create(1234567890124, "TestCreateProd");

        $this->assertEquals($new_product, $testprod);
    }

    /**
     * @covers Product::get_by_ean
     */
    public function testGet_by_ean() {
        $testprod = Product::get_by_ean(1234567890123);

        $this->assertEquals($this->product, $testprod);
    }

    /**
     * @covers Product::get_by_name
     */
    public function testGet_by_name() {
        $testprod = Product::get_by_name("Test");

        $this->assertEquals($this->product, $testprod[0]);
        $this->assertEquals(2, count($testprod));
    }

    /**
     * @covers Product::set_name
     */
    public function testSet_name() {
        $this->product->set_name('NewTest');
        $this->assertEquals('NewTest', $this->product->get_name());

        //revert changes
        $this->product->set_name('Testproduct');
        $this->assertEquals('Testproduct', $this->product->get_name());

    }

    /**
     * @covers Product::get_ingredients
     */
    public function testGet_ingredients() {
        $testing = new Ingredient(1, 'Testingredient');
        $testings = $this->product->get_ingredients();

        $this->assertEquals($testing, $testings[0]);
    }

    /**
     * @covers Product::add_ingredient
     */
    public function testAdd_ingredient() {
        $testing = new Ingredient(2, 'Nueffe');
        $this->assertTrue($this->product->add_ingredient($testing));
    }

    /**
     * @covers Product::rm_ingredient
     * @depends testAdd_ingredient
     * Reverts the changes of testAdd_ingredient()
     */
    public function testRm_ingredient() {
        $testing = new Ingredient(2, 'Nueffe');
        $this->assertTrue($this->product->rm_ingredient($testing));
    }

}
